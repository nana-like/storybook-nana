$button-colors: (
  primary: $c-primary,
  secondary: $c-secondary,
  tertiary: #45c98b
);

$button-size: (
  type: (
    large,
    medium,
    small
  ),
  font: (
    16px,
    14px,
    12px
  ),
  padding: (
    24px,
    20px,
    8px
  ),
  width: (
    140px,
    90px,
    50px
  ),
  height: (
    50px,
    40px,
    32px
  )
);

@function setHoverColor($value) {
  @return mix(#000, $value, 10%);
}

@keyframes rotate360deg {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.myButton {
  padding: 0;
  margin: 0;
  font-size: 1.4rem;
  flex-shrink: 0;
  flex-grow: 0;
  flex-basis: auto;
  text-align: center;
  background: none;
  border: 0;
  transition: all 0.3s;
  cursor: pointer;

  &.fill,
  &.outline {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    border-width: 0.1rem;
    border-style: solid;
    white-space: nowrap;
    border-radius: 0.4rem;
  }

  &.text {
    text-decoration: underline;
  }

  &.pure {
    width: auto;
    height: auto;
    line-height: 0;
  }

  // Colors
  @each $name, $value in $button-colors {
    &.#{$name} {
      &.fill {
        color: #fff;
        background-color: $value;
        border-color: $value;

        &:hover:not(:disabled):not(.isLoading) {
          background-color: setHoverColor($value);
          border-color: setHoverColor($value);
        }
      }

      &.outline {
        color: $value;
        border-color: currentColor;

        &:hover:not(:disabled):not(.isLoading) {
          color: #fff;
          background-color: $value;
          border-color: $value;
        }
      }

      &.text {
        color: $value;

        &:hover:not(:disabled):not(.isLoading) {
          color: setHoverColor($value);
        }
      }
    }
  }

  // Size
  @each $size in map-get($button-size, type) {
    $i: index(map-get($button-size, type), $size);

    &.#{$size}:not(.text):not(.isOnlyIcon):not(.pure) {
      height: nth(map-get($button-size, height), $i);
      padding: 0 nth(map-get($button-size, padding), $i);
      min-width: nth(map-get($button-size, width), $i);

      &:not(.isLoading) {
        font-size: nth(map-get($button-size, font), $i);
      }
    }

    &.#{$size}.isOnlyIcon:not(.pure) {
      font-size: 0;
      width: nth(map-get($button-size, height), $i);
      height: nth(map-get($button-size, height), $i);
      border-radius: 100%;

      &:empty:before {
        display: block;
        font-size: 1.1rem;
        content: 'Icon';
      }
    }
  }

  // State
  &.isFullWidth:not(.text):not(.isOnlyIcon) {
    width: 100%;
  }

  &.isDisabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  &.isLoading:not(.isOnlyIcon) {
    font-size: 0;
    user-select: none;
    cursor: progress;

    &:before {
      display: block;
      content: '';
      flex-shrink: 0;
      width: 1.2rem;
      height: 1.2rem;
      border: 0.2rem solid currentColor;
      border-top-color: transparent;
      border-radius: 100%;
      animation: rotate360deg infinite 1s linear;
    }

    .loading {
      @include blind;
    }
  }
}
